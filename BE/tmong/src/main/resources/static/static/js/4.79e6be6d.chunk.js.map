{"version":3,"sources":["api/adminOrderApi.js","routes/admin/AdminOrderManage/components/AdminOrderListItem.js","routes/admin/AdminOrderManage/components/AdminMakingArea.js","routes/admin/AdminOrderManage/AdminOrderManagePresenter.js","routes/admin/AdminOrderManage/AdminOrderManageContainer.js","routes/admin/AdminOrderManage/index.js"],"names":["__webpack_require__","d","__webpack_exports__","getOrderHistory","_axios__WEBPACK_IMPORTED_MODULE_0__","axios","fetchClient","category","arguments","length","undefined","page","size","get","concat","getNonpickupAll","callback","then","res","listData","data","content","map","item","order_id","id","menus","menuNameList","paymentType","paid","made","pickup","createdDate","amount","member_id","buyerId","catch","err","alert","AdminOrderListItem","_ref","timer","list","socketSetOrderState","orderCard","useRef","cardEffect","element","effect","classList","add","setTimeout","remove","handleChangeState","useCallback","state","graphicEffect","_ref2","Object","asyncToGenerator","regenerator_default","a","mark","_callee2","wrap","_context2","prev","next","_callee","_context","stop","sent","apply","this","controlChange","alignMenus","index","react_default","createElement","key","memoMakeBtn","useMemo","Fragment","type","value","onClick","current","className","memoPaidBtn","memoPickupBtn","ref","defaultProps","AdminMakingArea","areaName","title","mapListItem","keyOfItem","components_AdminOrderListItem","setCurrentOrderList","AdminOrderManagePresenter","currentOrderList","beforeList","filter","afterList","sort","b","components_AdminMakingArea","src","alt","AdminOrderManageContainer","_useState","useState","_useState2","slicedToArray","_useState3","_useState4","arrangedItem","setArrangedItem","localToken","localStorage","getItem","sessionToken","sessionStorage","token","client","Stomp","over","SockJS","transports","socketOrderInit","connect","Authorization","frame","subscribe","msg","JSON","parse","body","change","payload","assign","send","stringify","t0","_x","_x2","useEffect","_ref3","console","log","socketInit","disconnect","arrangedList","objectSpread","AdminOrderManage_AdminOrderManagePresenter"],"mappings":"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","file":"static/js/4.79e6be6d.chunk.js","sourcesContent":["import fetchClient from './axios';\n\nconst axios = fetchClient();\n\nconst getNonpickupAllUrl = 'https://my-json-server.typicode.com/badger012/mockserver/orders';\n\nconst getNonpickupAll = callback => {\n  axios\n    .get(`api/orders?page=0&size=100&category=PICKUP_FALSE`)\n    .then(res => {\n      const resList = res.data.content;\n      const listData = resList.map(item => {\n        return {\n          order_id: item.id,\n          menus: item.menuNameList,\n          paymentType: item.paymentType,\n          paid: item.paid,\n          made: item.made,\n          pickup: item.pickup,\n          createdDate: item.createdDate,\n          amount: item.amount,\n          member_id: item.buyerId,\n        };\n      });\n      callback(listData);\n    }) // order_id ,menus, paymentType, paid, made, pickup, createdDate, amount, membe_id\n    .catch(err => {\n      alert('주문가져오기실패', err);\n    });\n};\n\nexport const putOrderState = (callback, { order_id, made, paid, pickup }, change) => {\n  const payload = Object.assign({ made, pickup, paid }, change);\n  axios\n    .put(`api/orders/${order_id}`, payload)\n    .then(() => {\n      callback(order_id, payload);\n    })\n    .catch(err => {\n      alert(`상태변경에러: ${err}`);\n    });\n};\n// TODO adminOrder API 명세 나오는 대로 상태별 주문이력 가져오기로 코드 수정하자\nexport const getOrderHistory = (category = 'ALL', page = 0, size = 10) => {\n  // mockUrl : 'https://my-json-server.typicode.com/badger012/mockserver/orders'\n  return axios.get(`api/orders?page=${page}&size=${size}&category=${category}`);\n};\n\nexport default getNonpickupAll;\n","import React, { useCallback, useMemo, useRef, useState } from 'react';\nimport propTypes from 'prop-types';\nimport '../styles/AdminOrderListItem.scss';\n\nconst AdminOrderListItem = ({ list, socketSetOrderState }) => {\n  const { order_id, menus, made, paid, createdDate, amount, member_id } = list;\n  const orderCard = useRef(null);\n  let timer;\n\n  const cardEffect = (element, effect) => {\n    element.classList.add(effect);\n    setTimeout(() => {\n      element.classList.remove(effect);\n    }, 1000);\n  };\n\n  // state 변경 callback\n  const handleChangeState = useCallback(\n    (list, state, graphicEffect) => {\n      const controlChange = async () => {\n        if (!timer) {\n          if (!timer && graphicEffect) {\n            await graphicEffect();\n          }\n          timer = await setTimeout(async () => {\n            timer = null;\n            socketSetOrderState(list, state);\n          }, 1000);\n        }\n      };\n      controlChange();\n    },\n    [socketSetOrderState],\n  );\n\n  // 메뉴 아이콘 ui\n  const alignMenus = menus.map((item, index) => {\n    const result = <li key={index}>{item}</li>;\n    return result;\n  }, '');\n\n  // 메뉴 버튼 조건렌더\n  const memoMakeBtn = useMemo(() => {\n    return made ? (\n      <></>\n    ) : (\n      <input\n        type=\"button\"\n        value=\"→\"\n        onClick={() => {\n          handleChangeState(list, { made: true }, () => cardEffect(orderCard.current, 'ghost'));\n        }}\n        className=\"madeBtn\"\n      />\n    );\n  }, [made, list, handleChangeState]);\n\n  // 결제버튼 조건렌더\n  const memoPaidBtn = useMemo(() => {\n    return paid ? (\n      <div className=\"paid\">결제완료</div>\n    ) : (\n      <>\n        <div className=\"non-paid\">{`결제금액: ${amount} 원`}</div>\n        <input\n          className=\"payBtn\"\n          type=\"button\"\n          value=\"결제하기\"\n          onClick={() =>\n            handleChangeState(list, { paid: true }, () => cardEffect(orderCard.current, 'blink'))\n          }\n        />\n      </>\n    );\n  }, [amount, paid, list, handleChangeState]);\n\n  // 픽업버튼 조건렌더\n  const memoPickupBtn = useMemo(() => {\n    return made && paid ? (\n      <input\n        className=\"pickupBtn\"\n        type=\"button\"\n        value=\"PickUp\"\n        onClick={() =>\n          handleChangeState(list, { pickup: true }, () => cardEffect(orderCard.current, 'fly'))\n        }\n      />\n    ) : (\n      <></>\n    );\n  }, [made, paid, list, handleChangeState]);\n\n  return (\n    <div className=\"AdminOrderListItem\" ref={orderCard}>\n      {memoMakeBtn}\n      <div className=\"orderNum\">{`주문번호. ${order_id}`}</div>\n      <div className=\"member_id\">{`ID:  ${member_id}`}</div>\n      <ul>{alignMenus}</ul>\n      <div className=\"payArea\">{memoPaidBtn}</div>\n      {memoPickupBtn}\n      <div className=\"createdDate\">{createdDate}</div>\n    </div>\n  );\n};\n\nAdminOrderListItem.defaultProps = {\n  list: [],\n  socketSetOrderState: () => {},\n};\n\nAdminOrderListItem.propTypes = {\n  list: propTypes.objectOf(\n    propTypes.oneOfType([propTypes.number, propTypes.string, propTypes.array, propTypes.bool]),\n  ),\n  socketSetOrderState: propTypes.func,\n};\n\nexport default AdminOrderListItem;\n","import React from 'react';\nimport propTypes from 'prop-types';\nimport AdminOrderListItem from './AdminOrderListItem';\nimport '../styles/AdminMakingArea.scss';\n\nconst AdminMakingArea = ({ list, areaName, socketSetOrderState }) => {\n  const title = areaName === 'before' ? '제작중' : '제작완료';\n  const mapListItem = list.map((item, index) => {\n    const keyOfItem = index;\n    return (\n      <AdminOrderListItem key={keyOfItem} list={item} socketSetOrderState={socketSetOrderState} />\n    );\n  });\n\n  return (\n    <div className={`${areaName}Making-area`}>\n      <h2>{title}</h2>\n      <div className=\"orderBoard\">\n        <div className=\"orderLists\">{mapListItem}</div>\n      </div>\n    </div>\n  );\n};\n\nAdminMakingArea.defaultProps = {\n  list: [],\n  areaName: 'before',\n  setCurrentOrderList: () => {},\n};\n\nAdminMakingArea.propTypes = {\n  list: propTypes.arrayOf(propTypes.object),\n  areaName: propTypes.string,\n  setCurrentOrderList: propTypes.func,\n};\n\nexport default AdminMakingArea;\n","/* eslint-disable no-nested-ternary */\nimport React from 'react';\nimport propTypes from 'prop-types';\nimport AdminMakingArea from './components/AdminMakingArea';\nimport './styles/AdminOrderManagePresenter.scss';\n\nconst AdminOrderManagePresenter = ({ currentOrderList, socketSetOrderState }) => {\n  const beforeList = currentOrderList.filter(item => item.made === false && item.pickup === false);\n  const afterList = currentOrderList.filter(item => item.made === true && item.pickup === false);\n  // 주문 리스트정렬 제작중엔 미결제가 상단, 제작 완료시 결제완료된 것이 상단, 같은 조건시에는 주문번호순 정렬\n  beforeList.sort((a, b) => (a.paid < b.paid ? -1 : a.paid > b.paid ? 1 : 0));\n  afterList.sort((a, b) => (a.paid > b.paid ? -1 : a.paid < b.paid ? 1 : 0));\n\n  return (\n    <div className=\"AdminOrderManagePresenter\">\n      <h1>주문현황</h1>\n      <div className=\"orderContainer\">\n        <AdminMakingArea\n          list={beforeList}\n          areaName=\"before\"\n          socketSetOrderState={socketSetOrderState}\n        />\n        <div className=\"arrowContainer\">\n          <img\n            src=\"https://www.castelbrando.com/wp-content/themes/castel-brando/assets/img/svg/arrow-right.svg\"\n            alt=\"화살표이미지\"\n          />\n        </div>\n        <AdminMakingArea\n          list={afterList}\n          areaName=\"after\"\n          socketSetOrderState={socketSetOrderState}\n        />\n      </div>\n    </div>\n  );\n};\n\nAdminOrderManagePresenter.defaultProps = {\n  currentOrderList: [],\n  socketSetOrderState: () => {},\n};\n\nAdminOrderManagePresenter.propTypes = {\n  currentOrderList: propTypes.arrayOf(propTypes.object),\n  socketSetOrderState: propTypes.func,\n};\n\nexport default AdminOrderManagePresenter;\n","import React, { useState, useEffect } from 'react';\nimport AdminOrderManagePresenter from './AdminOrderManagePresenter';\nimport getNonpickupAll from '../../../api/adminOrderApi';\nimport SockJS from 'sockjs-client';\nimport Stomp from 'stompjs';\n\nconst AdminOrderManageContainer = () => {\n  const [currentOrderList, setCurrentOrderList] = useState([]);\n  const [arrangedItem, setArrangedItem] = useState(null);\n  const localToken = localStorage.getItem('TOKEN');\n  const sessionToken = sessionStorage.getItem('TOKEN');\n  const token = localToken\n    ? `Bearer ${localToken}`\n    : '' || sessionToken\n    ? `Bearer ${sessionToken}`\n    : '';\n\n  const sockJsProtocols = ['xhr-streaming', 'xhr-polling'];\n  const client = Stomp.over(\n    new SockJS('/teamonion', null, {\n      transports: sockJsProtocols,\n    }),\n  );\n\n  const socketOrderInit = () => {\n    client.connect({ Authorization: token }, frame => {\n      //상태변경 구독\n      client.subscribe('/topic/order', msg => {\n        const res = JSON.parse(msg.body);\n        setArrangedItem({\n          order_id: res.id,\n          paid: res.paid,\n          made: res.made,\n          pickup: res.pickup,\n          member_id: res.buyerId,\n        });\n      });\n      // 주문추가 구독\n      client.subscribe('/topic/orders/add', msg => {\n        const res = JSON.parse(msg.body);\n        setArrangedItem({\n          order_id: res.id,\n          menus: res.menuNameList,\n          paymentType: res.paymentType,\n          paid: res.paid,\n          made: res.made,\n          pickup: res.pickup,\n          createdDate: res.createdDate,\n          amount: res.amount,\n          member_id: res.buyerId,\n        });\n      });\n    });\n  };\n\n  const socketSetOrderState = async ({ order_id, member_id, made, paid, pickup }, change) => {\n    const payload = Object.assign({ id: order_id, buyerId: member_id, made, paid, pickup }, change);\n    try {\n      await client.send('/api/orders/update', {}, JSON.stringify(payload));\n    } catch (err) {\n      alert('연결 없음');\n      await socketOrderInit();\n    }\n  };\n\n  // 최초 api call\n  useEffect(() => {\n    const socketInit = async () => {\n      try {\n        await getNonpickupAll(setCurrentOrderList);\n        await socketOrderInit();\n      } catch (err) {\n        console.log(err);\n      }\n    };\n    socketInit();\n    return () => {\n      client.disconnect(() => {});\n    };\n  }, []);\n\n  // 변경된 아이템이 감지되면 렌더하기 위한 코드\n  useEffect(() => {\n    // 수정\n    if (arrangedItem) {\n      const arrangedList = currentOrderList.map(item =>\n        item.order_id == arrangedItem.order_id ? { ...item, ...arrangedItem } : item,\n      );\n      setCurrentOrderList(arrangedList);\n    }\n    // 추가\n    if (arrangedItem && arrangedItem.menus) {\n      const arrangedList = currentOrderList.concat(arrangedItem);\n      setCurrentOrderList(arrangedList);\n    }\n  }, [arrangedItem]);\n\n  return (\n    <AdminOrderManagePresenter\n      currentOrderList={currentOrderList}\n      socketSetOrderState={socketSetOrderState}\n    />\n  );\n};\n\nexport default AdminOrderManageContainer;\n","import AdminOrderManageContainer from './AdminOrderManageContainer';\n\nexport default AdminOrderManageContainer;\n"],"sourceRoot":""}