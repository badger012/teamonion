{"version":3,"sources":["utils/inputImgPreview.js","routes/admin/AdminMenuManage/components/MenuManagePopup.js","routes/admin/AdminMenuManage/AdminMenuManagePresenter.js","routes/admin/AdminMenuManage/AdminMenuManageContainer.js","routes/admin/AdminMenuManage/index.js"],"names":["inputImgPreview","inputDom","imgDom","file","reader","FileReader","value","readAsDataURL","files","onload","setAttribute","result","onerror","error","console","log","MenuManagePopup","_ref","menuPopupData","updateItem","createItem","setIsPopup","id","name","price","information","imageFile","_useState","useState","_useState2","Object","slicedToArray","popupName","setPopupName","_useState3","_useState4","popupPrice","setPopupPrice","_useState5","_useState6","popupInformation","setPopupInformation","_useState7","_useState8","popupFile","setPopupFile","isEdit","keys","length","inputImgRef","useRef","fileInputRef","onSubmitCallback","useCallback","e","preventDefault","formData","FormData","append","fakeImg","current","getAttribute","alert","useEffect","react_default","a","createElement","className","type","onClick","encType","onSubmit","onChange","target","ref","src","alt","defaultProps","AdminMenuManagePresenter","menuList","deleteItem","pageData","getMenuBypage","setMenuPopupData","isPopup","colums","key","width","resizable","formatter","Formatters","ImageFormatter","rows","map","item","imagePath","react_data_grid_default","columns","rowGetter","i","rowsCount","getCellActions","column","row","option","icon","callback","components_MenuManagePopup","pagination","itemSize","page","AdminMenuManageContainer","setMenuList","setPageData","_ref2","asyncToGenerator","regenerator_default","mark","_callee","res","_res$data","content","totalPages","newContent","wrap","_context","prev","next","getMenuList","sent","data","changeImagePath","t0","dir","stop","_x","apply","this","arguments","AdminMenuManage_AdminMenuManagePresenter","updateMenuList","then","change","objectSpread","get","catch","err","concat","deleteMenuList","filter","createMenuList","list"],"mappings":"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","file":"static/js/5.e737a587.chunk.js","sourcesContent":["const inputImgPreview = (inputDom, imgDom) => {\n  const file = inputDom;\n  const reader = new FileReader();\n  if (file.value) {\n    reader.readAsDataURL(file.files[0]);\n    reader.onload = () => {\n      imgDom.setAttribute('src', reader.result);\n    };\n    reader.onerror = error => {\n      console.log('이미지 인코딩 실패 Error: ', error);\n    };\n  } else {\n    imgDom.setAttribute('src', '');\n  }\n};\n\nexport default inputImgPreview;\n","import React, { useState, useEffect, useCallback, useRef } from 'react';\nimport propTypes from 'prop-types';\nimport '../styles/MenuManagePopup.scss';\nimport inputImgPreview from '../../../../utils/inputImgPreview';\n\nconst MenuManagePopup = ({ menuPopupData, updateItem, createItem, setIsPopup }) => {\n  const { id, name, price, information, imageFile } = menuPopupData;\n  const [popupName, setPopupName] = useState('');\n  const [popupPrice, setPopupPrice] = useState('');\n  const [popupInformation, setPopupInformation] = useState('');\n  const [popupFile, setPopupFile] = useState('');\n  const isEdit = Object.keys(menuPopupData).length > 1;\n  const inputImgRef = useRef(null); // 인풋 미리보기 img 태그\n  const fileInputRef = useRef(null); // 파일 input 태그\n\n  const onSubmitCallback = useCallback(\n    e => {\n      e.preventDefault();\n      if (popupName && popupPrice && popupInformation) {\n        const formData = new FormData();\n        formData.append('name', popupName);\n        formData.append('price', popupPrice);\n        formData.append('information', popupInformation);\n        formData.append('imageFile', popupFile);\n\n        const fakeImg = inputImgRef.current.getAttribute('src');\n        if (isEdit) {\n          updateItem(formData, id, fakeImg);\n          setIsPopup(false);\n        } else {\n          if (popupFile) {\n            createItem(formData, fakeImg);\n            setIsPopup(false);\n          } else {\n            alert('이미지를 넣어주세요');\n          }\n        }\n      } else {\n        alert('내용을 마저 채워주세요');\n      }\n    },\n    [popupName, popupPrice, popupInformation, popupFile],\n  );\n\n  useEffect(() => {\n    if (isEdit) {\n      // 수정모드 init\n      setPopupName(name);\n      setPopupPrice(price);\n      setPopupInformation(information);\n      setPopupFile(null);\n      inputImgRef.current.setAttribute('src', imageFile);\n    } else {\n      // 추가모드 init\n      setPopupName('');\n      setPopupPrice('');\n      setPopupInformation('');\n      setPopupFile(null);\n      inputImgRef.current.setAttribute('src', ''); // 이미지 미리보기 초기화\n    }\n  }, [menuPopupData]);\n\n  return (\n    // name, price, information, imageFile(src)\n    <div className=\"MenuManagePopup\">\n      <input\n        type=\"button\"\n        value=\"x\"\n        className=\"closeBtn\"\n        onClick={() => {\n          setIsPopup(false);\n        }}\n      />\n      <h1>{isEdit ? '수정' : '추가'}</h1>\n      <form\n        encType=\"multipart/form-data\"\n        className=\"MenuManageForm\"\n        onSubmit={e => onSubmitCallback(e)} // 폼 서브밋\n      >\n        <div className=\"nameArea inputArea\">\n          <div className=\"areaTitle\">상품명</div>\n          <input\n            type=\"text\"\n            value={popupName}\n            onChange={e => setPopupName(e.target.value)}\n            className=\"nameInput\"\n          />\n        </div>\n        <div className=\"priceArea inputArea\">\n          <div className=\"areaTitle\">가격</div>\n          <input\n            type=\"number\"\n            value={popupPrice}\n            onChange={e => setPopupPrice(e.target.value)}\n            className=\"priceInput\"\n          />\n        </div>\n        <div className=\"informationArea inputArea\">\n          <div className=\"areaTitle\">설명</div>\n          <textarea\n            value={popupInformation}\n            onChange={e => setPopupInformation(e.target.value)}\n            className=\"informationInput\"\n          />\n        </div>\n        <div className=\"imgInputArea inputArea\">\n          <div className=\"areaTitle\">이미지</div>\n          <input\n            type=\"file\"\n            className=\"fileInput\"\n            ref={fileInputRef}\n            onChange={e => {\n              inputImgPreview(fileInputRef.current, inputImgRef.current);\n              setPopupFile(e.target.files[0]);\n            }}\n          />\n          <div className=\"previewImgWrap\">\n            <img src=\"\" alt=\"\" ref={inputImgRef} className=\"imgInput\" />\n          </div>\n          <input type=\"submit\" value=\"저  장\" className=\"submitPopup\" />\n        </div>\n      </form>\n    </div>\n  );\n};\n\nMenuManagePopup.defaultProps = {\n  menuPopupData: {},\n  updateItem: () => {},\n  createItem: () => {},\n  setIsPopup: () => {},\n};\n\nMenuManagePopup.propTypes = {\n  menuPopupData: propTypes.objectOf(propTypes.oneOfType([propTypes.string, propTypes.number])),\n  updateItem: propTypes.func,\n  createItem: propTypes.func,\n  setIsPopup: propTypes.func,\n};\n\nexport default MenuManagePopup;\n","import React, { useState } from 'react';\nimport propTypes from 'prop-types';\nimport ReactDataGrid from 'react-data-grid';\nimport { Formatters } from 'react-data-grid-addons';\nimport MenuManagePopup from './components/MenuManagePopup';\nimport './styles/AdminMenuManagePresenter.scss';\nimport Pagination from '../../../components/pagination';\n\nconst AdminMenuManagePresenter = ({\n  menuList,\n  deleteItem,\n  updateItem,\n  createItem,\n  pageData,\n  getMenuBypage,\n}) => {\n  const [menuPopupData, setMenuPopupData] = useState({});\n  const [isPopup, setIsPopup] = useState(false);\n\n  const colums = [\n    {\n      key: 'id',\n      name: 'ID',\n      width: 70,\n      resizable: true,\n    },\n    {\n      key: 'imageFile',\n      name: '이미지',\n      formatter: Formatters.ImageFormatter,\n      width: 50,\n    },\n    {\n      key: 'name',\n      name: '상품명',\n      width: 140,\n      resizable: true,\n    },\n    {\n      key: 'price',\n      name: '가격',\n      width: 100,\n      resizable: true,\n    },\n    {\n      key: 'information',\n      name: '상세정보',\n      resizable: true,\n    },\n    {\n      key: 'option',\n      name: '옵션',\n      width: 100,\n    },\n  ];\n\n  const rows = menuList.map(item => ({\n    id: item.id,\n    imageFile: item.imagePath,\n    name: item.name,\n    price: item.price,\n    information: item.information,\n  }));\n\n  const getCellActions = (column, row) => {\n    const cellActions = {\n      option: [\n        {\n          icon: <span className=\"gridBtn\">수정</span>,\n          callback: () => {\n            setMenuPopupData({\n              id: row.id,\n              name: row.name,\n              price: row.price,\n              information: row.information,\n              imageFile: row.imageFile,\n            });\n            setIsPopup(true);\n          },\n        },\n        {\n          icon: <span className=\"gridBtn\">삭제</span>,\n          callback: () => {\n            deleteItem(row.id);\n          },\n        },\n      ],\n    };\n    return cellActions[column.key];\n  };\n\n  return (\n    <div className=\"AdminMenuManagePresenter\">\n      <div className=\"pageTitle\">메뉴관리</div>\n      <div className=\"menuList\">\n        <input\n          className=\"createBtn\"\n          type=\"button\"\n          value=\"추가\"\n          onClick={() => {\n            setMenuPopupData({});\n            setIsPopup(true);\n          }}\n        />\n        <ReactDataGrid\n          className=\"menuGrid\"\n          columns={colums}\n          rowGetter={i => rows[i]}\n          rowsCount={rows.length}\n          getCellActions={getCellActions}\n        />\n      </div>\n      {isPopup && (\n        <div className=\"MenuManagePopupContainer\">\n          <MenuManagePopup\n            menuPopupData={menuPopupData}\n            updateItem={updateItem}\n            createItem={createItem}\n            setIsPopup={setIsPopup}\n          />\n        </div>\n      )}\n\n      <Pagination\n        pageData={pageData}\n        callback={e => {\n          getMenuBypage({ itemSize: 10, page: e.target.value - 1 });\n        }}\n      />\n    </div>\n  );\n};\n\nAdminMenuManagePresenter.defaultProps = {\n  menuList: [],\n  deleteItem: () => {},\n  updateItem: () => {},\n  createItem: () => {},\n  getMenuBypage: () => {},\n  pageData: {},\n};\n\nAdminMenuManagePresenter.propTypes = {\n  menuList: propTypes.arrayOf(propTypes.object),\n  deleteItem: propTypes.func,\n  updateItem: propTypes.func,\n  createItem: propTypes.func,\n  getMenuBypage: propTypes.func,\n  pageData: propTypes.shape({\n    page: propTypes.number,\n    total: propTypes.number,\n  }),\n};\n\nexport default AdminMenuManagePresenter;\n","import React, { useState, useEffect } from 'react';\nimport AdminMenuManagePresenter from './AdminMenuManagePresenter';\nimport { getMenuList, deleteMenuList, updateMenuList, createMenuList } from '../../../api/menuApi';\nimport changeImagePath from '../../../utils/changeImagePath';\n\nconst AdminMenuManageContainer = () => {\n  const [menuList, setMenuList] = useState([]);\n  const [pageData, setPageData] = useState({});\n  const deleteItem = id => {\n    deleteMenuList(id)\n      .then(() => {\n        const change = menuList.filter(item => item.id !== id);\n        setMenuList(change);\n      })\n      .catch(err => {\n        alert(`삭제실패${err}`);\n      });\n  };\n\n  const updateItem = (formData, id, fakeImg) => {\n    updateMenuList(id, formData)\n      .then(() => {\n        const change = menuList.map(item =>\n          item.id === id\n            ? {\n                ...item,\n                name: formData.get('name'),\n                price: formData.get('price'),\n                information: formData.get('information'),\n                imageFile: fakeImg,\n              }\n            : item,\n        );\n        setMenuList(change);\n      })\n      .catch(err => {\n        alert(`수정실패${err}`);\n      });\n  };\n\n  const createItem = (formData, fakeImg) => {\n    createMenuList(formData)\n      .then(res => {\n        const list = menuList.concat({\n          id: res.data,\n          name: formData.get('name'),\n          price: formData.get('price'),\n          information: formData.get('information'),\n          imageFile: fakeImg,\n        });\n        setMenuList(list);\n      })\n      .catch(err => {\n        console.dir(err);\n        alert(`추가실패 ${err}`);\n      });\n  };\n\n  const getMenuBypage = async ({ itemSize, page }) => {\n    try {\n      const res = await getMenuList({ itemSize, page });\n      const { content, totalPages } = res.data;\n      const newContent = changeImagePath(content);\n      setMenuList(newContent);\n      setPageData({ page, totalPages });\n    } catch (err) {\n      alert('상품로드 실패', err);\n      console.dir(err);\n    }\n  };\n\n  useEffect(() => {\n    getMenuBypage({ itemSize: 10, page: 0 });\n  }, []);\n\n  return (\n    <AdminMenuManagePresenter\n      menuList={menuList}\n      updateItem={updateItem}\n      deleteItem={deleteItem}\n      createItem={createItem}\n      pageData={pageData}\n      getMenuBypage={getMenuBypage}\n    />\n  );\n};\n\nexport default AdminMenuManageContainer;\n","import AdminMenuManageContainer from './AdminMenuManageContainer';\n\nexport default AdminMenuManageContainer;\n"],"sourceRoot":""}